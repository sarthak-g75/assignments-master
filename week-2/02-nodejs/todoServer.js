/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express')
const bodyParser = require('body-parser')
let data = require('./todos.json')

const app = express()

app.use(bodyParser.json())

app.get('/todos', (req, res) => {
  try {
    res.status(200).send(data)
  } catch (error) {
    res.status(500).send(error.message)
  }
})
app.post('/todos', async (req, res) => {
  try {
    const { title, description, completed } = req.body
    let i = data.length
    // console.log(data.length)
    if (data.length >= 1) {
      i++
    } else {
      i = 1
    }
    let newTodo = {
      id: i,
      title: title,
      description: description,
      completed: completed,
    }
    data.push(newTodo)
    res.status(200).send(data)
  } catch (error) {
    res.status(500).send(error.message)
  }
})
app.get('/todos/:id', async (req, res) => {
  try {
    let id = req.params.id
    const result = data.filter((elem) => {
      return elem.id == id
    })
    res.status(200).send(result.length > 0 ? result : 'Not found')
  } catch (error) {
    res.status(500).send(error.message)
  }
})

app.put('/todos/:id', async (req, res) => {
  try {
    const id = req.params.id
    const originalDataIndex = data.findIndex((elem) => elem.id == id)

    const { title, description, completed } = req.body
    if (originalDataIndex > -1) {
      data[originalDataIndex] = {
        id: data[originalDataIndex].id,
        title: title || data[originalDataIndex].title,
        description: description || data[originalDataIndex].description,
        completed: completed || data[originalDataIndex].completed,
      }
      res.status(200).send('updated')
    }
    res.status(404).send('Not found')
  } catch (error) {
    res.status(500).send(error.message)
  }
})
app.delete('/todos/:id', (req, res) => {
  try {
    const id = req.params.id
    const originalDataIndex = data.findIndex((elem) => elem.id == id)
    if (originalDataIndex > -1) {
      data.splice(originalDataIndex, 1)
      res.status(200).send('deleted successfully')
    }
    res.status(400).send('not found')
  } catch (error) {
    res.status(500).send(error.message)
  }
})
app.listen(3000)

module.exports = app
